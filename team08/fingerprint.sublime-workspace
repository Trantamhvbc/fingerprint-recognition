{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"b",
				"biniry_image"
			],
			[
				"che",
				"check_border"
			],
			[
				"f",
				"False"
			],
			[
				"re",
				"return"
			],
			[
				"check_mi",
				"check_minunate_point"
			],
			[
				"k",
				"k1"
			],
			[
				"m",
				"minunate"
			],
			[
				"ce",
				"check_minunate_point"
			],
			[
				"i",
				"i_max"
			],
			[
				"if",
				"if\tIf Condition"
			],
			[
				"c",
				"count"
			],
			[
				"y",
				"y_max"
			],
			[
				"x",
				"x_max"
			],
			[
				"s",
				"shape"
			],
			[
				"sh",
				"show_image"
			],
			[
				"j",
				"j_max"
			],
			[
				"gabor_",
				"gabor_img"
			],
			[
				"g",
				"gabor"
			],
			[
				"im",
				"import"
			],
			[
				"as",
				"astype"
			],
			[
				"pr",
				"print"
			],
			[
				"se",
				"search"
			],
			[
				"MF",
				"Mfccer"
			],
			[
				"l",
				"line_split"
			],
			[
				"pa",
				"path"
			],
			[
				"n",
				"neigh"
			],
			[
				"p",
				"paths"
			],
			[
				"t",
				"try\tTry/Except"
			],
			[
				"write_",
				"write_csv"
			],
			[
				"M",
				"Max"
			],
			[
				"d",
				"deltas_mfcc"
			],
			[
				"e",
				"extract_audio"
			],
			[
				"le",
				"lenght_x"
			],
			[
				"li",
				"link_path"
			],
			[
				"r",
				"readline"
			],
			[
				"wri",
				"write_mfcc"
			],
			[
				"w",
				"write"
			],
			[
				"wr",
				"writerow"
			],
			[
				"my",
				"my_file"
			],
			[
				"dou",
				"double_deltas_signal"
			],
			[
				"de",
				"deltas_signal"
			],
			[
				"da",
				"deltas"
			],
			[
				"sum",
				"sum_square"
			],
			[
				"a",
				"append"
			],
			[
				"si",
				"signal"
			],
			[
				"mf",
				"mfcc"
			],
			[
				"ch",
				"choose_row"
			],
			[
				"in",
				"index"
			],
			[
				"ra",
				"readline"
			],
			[
				"trai",
				"train_loader"
			],
			[
				"R",
				"Returns"
			],
			[
				"tes",
				"test"
			],
			[
				"co",
				"count_batch_idx"
			],
			[
				"o",
				"outs"
			],
			[
				"lo",
				"loss_item_sum"
			],
			[
				"ba",
				"batch_size"
			],
			[
				"data",
				"dataset"
			],
			[
				"D",
				"DataLoader"
			],
			[
				"C",
				"CNNnet"
			],
			[
				"__",
				"__len__"
			],
			[
				"datas",
				"datas"
			],
			[
				"ge",
				"get_name"
			]
		]
	},
	"buffers":
	[
		{
			"file": "data/orientation.py",
			"settings":
			{
				"buffer_size": 2311,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pipline.py",
			"settings":
			{
				"buffer_size": 979,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "model/minunate_detection.py",
			"settings":
			{
				"buffer_size": 2477,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "data/normal_image.py",
			"settings":
			{
				"buffer_size": 461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "model/thinning.py",
			"settings":
			{
				"buffer_size": 445,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import numpy as np"
			}
		},
		{
			"file": "model/__init__.py",
			"settings":
			{
				"buffer_size": 89,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\nimport numpy as np\nimport scipy\n\ndef gabor_filter(im, orient, freq, kx=0.65, ky=0.65):\n    \"\"\"\n    :param im:\n    :param orient:\n    :param freq:\n    :param kx:\n    :param ky:\n    :return:\n    \"\"\"\n    \n    angleInc = 3\n    im = np.double(im)\n    rows, cols = im.shape\n    return_img = np.zeros((rows,cols))\n\n    # Round the array of frequencies to the nearest 0.01 to reduce the\n    # number of distinct frequencies we have to deal with.\n    freq_1d = freq.flatten()\n    frequency_ind = np.array(np.where(freq_1d>0))\n    non_zero_elems_in_freq = freq_1d[frequency_ind]\n    non_zero_elems_in_freq = np.double(np.round((non_zero_elems_in_freq*100)))/100\n    unfreq = np.unique(non_zero_elems_in_freq)\n\n    # Generate filters corresponding to these distinct frequencies and\n    # orientations in 'angleInc' increments.\n    sigma_x = 1/unfreq*kx\n    sigma_y = 1/unfreq*ky\n    block_size = np.round(3*np.max([sigma_x,sigma_y])).astype('int')\n    array = np.linspace(-block_size,block_size,(2*block_size + 1))\n    x, y = np.meshgrid(array, array)\n\n    # gabor filter equation\n    reffilter = np.exp(-(((np.power(x,2))/(sigma_x*sigma_x) + (np.power(y,2))/(sigma_y*sigma_y)))) * np.cos(2*np.pi*unfreq[0]*x)\n    filt_rows, filt_cols = reffilter.shape\n    gabor_filter = np.array(np.zeros((180//angleInc, filt_rows, filt_cols)))\n\n    # Generate rotated versions of the filter.\n    for degree in range(0,180//angleInc):\n        rot_filt = scipy.ndimage.rotate(reffilter,-(degree*angleInc + 90),reshape = False)\n        gabor_filter[degree] = rot_filt\n\n    # Convert orientation matrix values from radians to an index value that corresponds to round(degrees/angleInc)\n    maxorientindex = np.round(180/angleInc)\n    orientindex = np.round(orient/np.pi*180/angleInc)\n    for i in range(0,rows//16):\n        for j in range(0,cols//16):\n            if(orientindex[i][j] < 1):\n                orientindex[i][j] = orientindex[i][j] + maxorientindex\n            if(orientindex[i][j] > maxorientindex):\n                orientindex[i][j] = orientindex[i][j] - maxorientindex\n\n    # Find indices of matrix points greater than maxsze from the image boundary\n    block_size = int(block_size)\n    valid_row, valid_col = np.where(freq>0)\n    finalind = \\\n        np.where((valid_row>block_size) & (valid_row<rows - block_size) & (valid_col>block_size) & (valid_col<cols - block_size))\n\n    for k in range(0, np.shape(finalind)[1]):\n        r = valid_row[finalind[0][k]]; c = valid_col[finalind[0][k]]\n        img_block = im[r-block_size:r+block_size + 1][:,c-block_size:c+block_size + 1]\n        return_img[r][c] = np.sum(img_block * gabor_filter[int(orientindex[r//16][c//16]) - 1])\n\n    gabor_img = 255 - np.array((return_img < 0)*255).astype(np.uint8)\n\n    return gabor_img",
			"file": "data/gaborfilter.py",
			"file_size": 2751,
			"file_write_time": 132367753099386700,
			"settings":
			{
				"buffer_size": 2752,
				"line_ending": "Unix"
			}
		},
		{
			"file": "data/frequency.py",
			"settings":
			{
				"buffer_size": 2379,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import numpy as np\nimport cv2 as cv\nimport math\n\ndef normalise(img):\n    return (img - np.mean(img))/(np.std(img))\n\n\ndef create_segmented_and_variance_images(im, w, threshold=.3):\n    \"\"\"\n    Trả về mặt identifying ROI. Tính độ lệch chuẩn trong từng khối hình ảnh và ngưỡng ROI\n    Nó cũng bình thường hóa các giá trị intesity của hình ảnh sao cho các vùng sườn núi có giá trị trung bình bằng 0, đơn vị độ chuẩn\n    sai lệch.\n    :param im: Image\n    :param w: kích cỡ của block\n    :param threshold: std ngưỡng\n    :return: segmented_image\n    \"\"\"\n    (y, x) = im.shape\n    threshold = np.std(im)*threshold\n\n    image_variance = np.zeros(im.shape)\n    segmented_image = im.copy()\n    mask = np.ones_like(im)\n    for i in range(0, x, w):\n        for j in range(0, y, w):\n            box = [i, j, min(i + w, x), min(j + w, y)]\n            block_stddev = np.std(im[box[1]:box[3], box[0]:box[2]])\n            image_variance[box[1]:box[3], box[0]:box[2]] = block_stddev\n\n    # loc theo nguong threshold\n    mask[image_variance < threshold] = 0\n    # lam muot anh\n    kernel = cv.getStructuringElement(cv.MORPH_ELLIPSE,(w*2, w*2))\n    mask = cv.morphologyEx(mask, cvMORPH_ELLIPSE.MORPH_OPEN, kernel)\n    mask = cv.morphologyEx(mask, cv.MORPH_CLOSE, kernel)\n\n    # normalize segmented image\n    segmented_image *= mask\n    im = normalise(im)\n    mean_val = np.mean(im[mask==0]) # trung binh diem anh la nhieu\n    std_val = np.std(im[mask==0])# tinh do lech chuan \n    if  math.isnan(mean_val):\n        mean_val = 0\n        std_val = 1\n    norm_img = (im - mean_val)/(std_val)\n\n    return segmented_image, norm_img, mask",
			"file": "data/segmentation.py",
			"file_size": 1673,
			"file_write_time": 132369732013668866,
			"settings":
			{
				"buffer_size": 1613,
				"line_ending": "Unix"
			}
		},
		{
			"file": "data/__init__.py",
			"settings":
			{
				"buffer_size": 226,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "data/image_procesing.py",
			"settings":
			{
				"buffer_size": 1017,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Install Package Control"
			],
			[
				"pak",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/dell/Desktop/f/model/minunate_detection.py",
		"/home/dell/Desktop/f/data/data_procesing.py",
		"/home/dell/Desktop/f/data/image_procesing.py",
		"/home/dell/Desktop/van.py",
		"/home/dell/Desktop/DATA-MIT/search.py",
		"/home/dell/Desktop/DATA-MIT/main.py",
		"/home/dell/Desktop/DATA-MIT/feature/MFCC.py",
		"/home/dell/Desktop/DATA-MIT/pre_procesing.py",
		"/home/dell/Desktop/DATA-MIT/feature/FeutureData.py",
		"/home/dell/Desktop/input.txt",
		"/home/dell/Downloads/Nhom3_Bai_Toan_LP.py",
		"/home/dell/Desktop/f/data/fft.py",
		"/home/dell/Desktop/DATA-MIT/utils.py",
		"/home/dell/Desktop/f/model/models_pretrain.py",
		"/home/dell/Downloads/sut.txt",
		"/home/dell/Desktop/f/train.py",
		"/home/dell/Desktop/f/data/torch_Dataset.py",
		"/home/dell/Downloads/librosa-feature-delta-1.py",
		"/home/dell/Desktop/DATA-MIT/feature/utils.py",
		"/home/dell/Downloads/Nhom3_Bai_Toan_LP (1).py",
		"/home/dell/Desktop/root/test.py",
		"/home/dell/Desktop/f/model/__init__.py",
		"/home/dell/Desktop/f/model.py",
		"/home/dell/Desktop/f/data/__init__.py",
		"/home/dell/Desktop/f/data/import cv2 as cv",
		"/home/dell/.config/sublime-text-3/Packages/Terminal/Terminal.sublime-settings",
		"/home/dell/Desktop/root/University/HQTDPT/arcface/deploy/face_embedding.py",
		"/home/dell/Desktop/root/University/HQTDPT/arcface/src/train_softmax.py",
		"/home/dell/Downloads/doan-20200507T013745Z-001/doan/phantich/mel.py",
		"/home/dell/Desktop/root/University/datamining/dtd_and_xml",
		"/home/dell/Desktop/test.py",
		"/home/dell/Desktop/root/University/datamining/dtd_and_xml.XML",
		"/home/dell/.config/sublime-text-3/Packages/User/Terminal.sublime-settings"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"orient",
			"gabor_filter",
			"finalind",
			"frequest",
			"sigma_x",
			"block_size",
			"np.linspace",
			"block_orient",
			"cosorient",
			"orientim",
			"norm_img",
			"ridge_freq",
			"pr",
			"MFCC",
			"Continue",
			"train_net"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "data/orientation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2311,
						"regions":
						{
						},
						"selection":
						[
							[
								1783,
								1783
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pipline.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 979,
						"regions":
						{
						},
						"selection":
						[
							[
								742,
								742
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "model/minunate_detection.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2477,
						"regions":
						{
						},
						"selection":
						[
							[
								417,
								417
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "data/normal_image.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 461,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								229
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "model/thinning.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 445,
						"regions":
						{
						},
						"selection":
						[
							[
								334,
								334
							]
						],
						"settings":
						{
							"auto_name": "import numpy as np",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "model/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 89,
						"regions":
						{
						},
						"selection":
						[
							[
								89,
								89
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "data/gaborfilter.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2752,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "data/frequency.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2379,
						"regions":
						{
						},
						"selection":
						[
							[
								484,
								484
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 332.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "data/segmentation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1613,
						"regions":
						{
						},
						"selection":
						[
							[
								1252,
								1252
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "data/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 226,
						"regions":
						{
						},
						"selection":
						[
							[
								225,
								225
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "data/image_procesing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1017,
						"regions":
						{
						},
						"selection":
						[
							[
								529,
								529
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 82.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "fingerprint.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
